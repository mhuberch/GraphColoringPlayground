{"version":3,"file":"bundle-81b02255c8ebbf773598.min.js","mappings":"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","sources":["webpack://graphPlayground/webpack/runtime/chunk loaded","webpack://graphPlayground/webpack/runtime/create fake namespace object","webpack://graphPlayground/webpack/runtime/load script","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts?dbca","webpack://graphPlayground/./src/js/UIInteractions.ts","webpack://graphPlayground/./src/js/app.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/EdgeImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/GraphImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/NodeImmut.ts","webpack://graphPlayground/./src/js/graphState.ts","webpack://graphPlayground/./src/js/languages.ts","webpack://graphPlayground/./src/js/main.ts","webpack://graphPlayground/./src/js/settings.ts","webpack://graphPlayground/./src/js/util/genericHelpers.ts","webpack://graphPlayground/./src/js/util/graphHelpers.ts","webpack://graphPlayground/./src/ lazy ^\\.\\/.*\\.ts$ namespace object","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/runtime/compat get default export","webpack://graphPlayground/webpack/runtime/define property getters","webpack://graphPlayground/webpack/runtime/ensure chunk","webpack://graphPlayground/webpack/runtime/get javascript chunk filename","webpack://graphPlayground/webpack/runtime/global","webpack://graphPlayground/webpack/runtime/hasOwnProperty shorthand","webpack://graphPlayground/webpack/runtime/make namespace object","webpack://graphPlayground/webpack/runtime/node module decorator","webpack://graphPlayground/webpack/runtime/publicPath","webpack://graphPlayground/webpack/runtime/jsonp chunk loading","webpack://graphPlayground/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"graphPlayground:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"GraphAlgorithmWorker-00506f8c348c85400eb5.min.worker.js\");\n}\n","import gHelp from \"./util/graphHelpers\";\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport GraphState from \"./graphState\";\nimport { FlowResult, kColorResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport * as languages from \"./languages\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst possibleColorModes = {\n    \"Ordered by Node Label (increasing)\": 1,\n    \"Ordered by Node Label (decreasing)\": 2,\n    \"Ordered by Degree (increasing)\": 3,\n    \"Ordered by Degree (decreasing)\": 4\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = languages.current.ShortestPath;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (fn.includes(\"dijkstra\")) {\n                        help.showSimpleModal(\n                            languages.current.DijkstraError,\n                            languages.current.DijkstraErrorHTML\n                        );\n                    } else if (fn.includes(\"bellman\")) {\n                        help.showSimpleModal(\n                            languages.current.BellmanFordError,\n                            languages.current.BellmanFordErrorHTML\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                    help.htmlEncode(source.toString()), help.htmlEncode(sink.toString()))}`;\n\n                if (a.pathExists) {\n                    p = help.stringReplacement(languages.current.ShortestPathFromAToB, title,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.distance);\n                    if (weighted) {\n                        p += `\\n${help.stringReplacement(languages.current.WithWeightedCost, a.cost)}`;\n                    }\n                    p += \"\\n\\n\" + languages.current.UsingPath;\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        languages.current.Go,\n        [\n            {\n                label: languages.current.StartNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: languages.current.EndNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\n\nconst makeAndPrintGreedyColoring = (): void => {\n    const myName = languages.current.GraphColoringGreedy;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const orderingMode = values[0];\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                GraphState.graphProperties.colormode = 2;\n                GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n                (GraphState.state.graphColoringGreedy as {}) = a.colors;\n\n                \n\n                // p += `\\nApprox. Chromatic Number from Welsh algorithm: ${a.chromaticNumber}`;\n\n\n                let p = \"Greedy algorithm work with the following ordering of vertices: \\n\";\n\n                const order : number[] = a.vertexOrder;\n\n                order.forEach((v, i) => {\n                    p += GraphState.nodeIDToLabel(v) + \", \";\n                })\n\n                p += \"\\n\\n\";\n\n                p += help.stringReplacement(languages.current.ApproxChromaticNumberIs, a.chromaticNumber + \"\");\n\n                p += \"\\n\\n\";\n\n                const colors = help.flatten(a.colors);\n                \n                const historyToPrint: {nodeToColor: number, colorsOfNeighbors: {[key: number]: number} }[] = a.history;\n\n                if (historyToPrint != null && window.settings.getOption(\"stepByStepInfo\")) {\n                    p += \"<h3>Step-by-Step output:</h3><hr>\" + \"\\n\";\n\n                    for (let step = 0; step < historyToPrint.length; step++) {\n\n                        const curNode: number = historyToPrint[step].nodeToColor;\n                        const colAdjList: { [key: number]: number } = historyToPrint[step].colorsOfNeighbors as {};\n\n                        p += \"Step \" + (step+1) + \" : \" + \"AL(\" + GraphState.nodeIDToLabel(curNode) + \") : \";\n\n                        for (let neighbor in colAdjList) {\n                            const nb: number = (neighbor as unknown) as number;\n                            if ( colAdjList[neighbor] === -1) {\n                                // p += neighbor + \" not yet colored; \"\n                                p += GraphState.nodeIDToLabel(nb) + \" not yet colored; \"\n                            }\n                            else {\n                                p += GraphState.nodeIDToLabel(nb) + \" with color \" + colAdjList[neighbor] + \"; \";\n                            }\n                            // p += GraphState.nodeIDToLabel(neighbor) + \" with color \" + colAdjList[neighbor].toString() + \"; \";\n                        }\n\n                        p += \"--> \" + help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(curNode), colors[curNode] + \"\");\n                        //p += \"--> \" + help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(curNode), 0colors[curNode].toString()) + \"\\n\";\n                        p += \"\\n\";\n\n                    }\n\n                }\n                else {\n                    p += \"No step-by-step output. If desired, please ensure that the checkbox 'Step-by-Step Info' in the 'Graph Options' menu is chosen and rerun the coloring algorithm.\";\n                }\n\n                p = `<h3>${languages.current.GraphColoringGreedyTitle}</h3><hr>${help.htmlEncode(p)}`;\n                \n\n\n                if (a.chromaticNumber > 6) {\n                    p += \"As the coloring needs more than the six standard colors additional randomly chosen colors are used. To change their appearence press the button.\"\n                    p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                }\n\n                help.printout(p);\n                window.main.applyColors();\n\n            });\n            w.send({\n                type: \"colorNetworkGreedy\",\n                args: [orderingMode],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        languages.current.GraphColoringGreedy,\n        languages.current.Go,\n        [\n            {\n                type: \"select\",\n                label: languages.current.ColoringMode, \n                optionText: Object.keys(possibleColorModes), \n                optionValues: Object.values(possibleColorModes), \n                initialValue: 0\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\n\nconst makeAndPrintkColoringExact = (mode: number, constrainedColoring: boolean): void => {\n    \n    const myName = (mode === 0) ? languages.current.kColoringBruteForce : (constrainedColoring ? languages.current.kColoringConstrainedBacktracking : languages.current.kColoringBacktracking);\n\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    const options: ModalFormRow[] = [\n        {\n        type: \"numeric\", initialValue: 1, label: languages.current.NumberOfColors, validationFunc: (v) => {\n            return v > 0 || languages.current.NumberOfColorsPositiveError;}\n        }\n    ]\n    if (window.settings.getOption(\"stepByStepInfo\")) {\n        options.push(\n            { \n                type: \"numeric\", initialValue: 10, label: languages.current.NumberOfSteps, validationFunc: (v) => {\n                    return v > 0 || languages.current.NumberOfColorsPositiveError;}\n            }\n        );\n    }\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const kColor = values[0];\n            let numberOfSteps = -1;\n\n            if (window.settings.getOption(\"stepByStepInfo\")) {\n                numberOfSteps = values[1];\n            }            \n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                \n                a = a as kColorResult;\n\n                GraphState.graphProperties.colormode = 1;\n\n                \n\n                if (GraphState.state.kColorable === null || GraphState.getProperty(\"Most recent k-color check\") == null) {\n                    GraphState.graphProperties[\"Most recent k-color check\"] = -1;\n                    GraphState.state.kColorable = {};\n                }\n\n                let p = \"\";\n\n                if (a.kColorable) {\n                    \n\n                    GraphState.graphProperties[\"Most recent k-color check\"] = a.kColor;\n\n                    const bestChrNumber = GraphState.graphProperties[\"Current best guess of chromatic number\"];\n                    if (bestChrNumber === null) {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = a.kColor;\n                    }\n                    else {\n                        GraphState.graphProperties[\"Current best guess of chromatic number\"] = Math.min(a.kColor, bestChrNumber);\n                    }\n\n\n                    GraphState.setUpToDate(true, [\"Most recent k-color check\", \"kColorable\", \"Current best guess of chromatic number\"]); // TODO: What about kColor dictionary if changing the graph?\n                    (GraphState.state.kColorable[kColor] as {}) = a.color;\n\n                    p += help.stringReplacement(languages.current.kColoringSuccess, a.kColor + \"\") + \"\\n\";\n\n                    p += help.stringReplacement(languages.current.kColoringTerminated, a.totalSteps + \"\");\n                    \n                    p = (mode === 0) ? `<h3>${languages.current.kColoringBruteForceTitle}</h3><hr>${help.htmlEncode(p)}` : `<h3>${languages.current.kColoringBacktrackingTitle}</h3><hr>${help.htmlEncode(p)}`;\n                    \n                    if (a.kColor > 6) {\n                        p += languages.current.ReColorInfo;\n                        p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n                    }\n\n                }\n                else {\n                    p += help.stringReplacement(languages.current.kColoringFail, a.kColor + \"\") + \"\\n\";\n                    p += help.stringReplacement(languages.current.kColoringCheckedAll, a.totalSteps + \"\");\n\n                    GraphState.state.kColorable[kColor] = [];\n\n                }\n\n                if (numberOfSteps > 0) {\n                    p += \"\\n\\n\";\n                    p += help.stringReplacement(languages.current.kColoringDocStep1, numberOfSteps + \"\") + \"\\n\";\n                    p += languages.current.kColoringDocStep2;\n                    \n                    for (let i = 0; i < a.color.length; i++) {\n                        p += GraphState.nodeIDToLabel(i) + \", \";\n                    };\n                    p += \"\\n\";\n\n                    for (let step = 0; step < a.history.length; step++) {\n                        p += languages.current.Step + (step+1) + \": \" + a.history[step].toString() + \"\\n\";\n                    }\n                }\n\n                help.printout(p);\n\n                if (a.kColorable) {\n                    window.main.applyColors();\n                }\n\n            });\n            w.send({\n                type: \"kColoringExact\",\n                args: [mode, constrainedColoring, kColor, numberOfSteps],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n        },\n        (mode === 0) ? languages.current.kColoringBruteForce : languages.current.kColoringBacktracking,\n        languages.current.Go,\n        options,\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = languages.current.ConnectedComponents;\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = languages.current.StronglyConnectedComponents;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(languages.current.TaskAlreadyRunning);\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = help.stringReplacement(languages.current.NumberOfConnectedComponents, cc, a.count);\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += help.stringReplacement(languages.current.VertexIsInConnectedComponentNumber, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: languages.current.GetAllDegrees,\n                directional: false,\n                applyFunc: UIInteractions.getAllDegrees,\n                display: true\n            },\n            {\n                name: languages.current.CheckColoring,\n                directional: false,\n                applyFunc: UIInteractions.checkGraphColoring,\n                display: true\n            },\n            {\n                //name: \"Graph Coloring Welsh\",\n                name: languages.current.GraphColoringGreedy,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintGreedyColoring();\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringBruteForce,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringExact(0, false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringBacktracking,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringExact(1, false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.kColoringConstrainedBacktracking,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintkColoringExact(1, true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.ConnectedComponents,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.StronglyConnectedComponents,\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: languages.current.BFS,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BFS, \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.Dijkstra,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.Dijkstra, \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.BellmanFord,\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BellmanFord, \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.FordFulkerson,\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: languages.current.KruskalMST,\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: languages.current.Cyclic,\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.TopoSort,\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#stop-allworker-link\", UIInteractions.terminateAllWebWorkers);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-cycle-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Cycle();\n        });\n        makeSimpleClickListener(\"#load-wheel-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Wheel();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#load-default-color\", async () => {\n            GraphState.resetColor();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n        makeSimpleClickListener(\"#import-graph-g1\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(0);\n        });\n        makeSimpleClickListener(\"#import-graph-g2\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(1);\n        });\n        makeSimpleClickListener(\"#import-graph-g3\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(2);\n        });\n        makeSimpleClickListener(\"#import-graph-g4\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportGraphExercise(3);\n        });\n        makeSimpleClickListener(\"#blank-background\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(0);\n        });\n        makeSimpleClickListener(\"#import-verkehrskreuzung\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(1);\n        });\n        makeSimpleClickListener(\"#import-schweiz\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(2);\n        });\n        makeSimpleClickListener(\"#import-sudoku-4x4\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.setGraphBackground(3);\n        });\n\n        (document.querySelector(\"#fileDropdown\") as HTMLAnchorElement).innerText = languages.current.File;\n        (document.querySelector(\"#import-file-link\") as HTMLAnchorElement).innerText = languages.current.ImportFile;\n        (document.querySelector(\"#import-text-link\") as HTMLAnchorElement).innerText = languages.current.ImportText;\n        (document.querySelector(\"#export-file-link\") as HTMLAnchorElement).innerText = languages.current.ExportFile;\n        (document.querySelector(\"#export-text-link\") as HTMLAnchorElement).innerText = languages.current.ExportText;\n\n        (document.querySelector(\"#graphloadDropdown\") as HTMLAnchorElement).innerText = languages.current.LoadGraphs;\n        (document.querySelector(\"#import-graph-g1\") as HTMLAnchorElement).innerText = \"Graph G1\";\n        (document.querySelector(\"#import-graph-g2\") as HTMLAnchorElement).innerText = \"Graph G2\";\n        (document.querySelector(\"#import-graph-g3\") as HTMLAnchorElement).innerText = \"Graph G3\";\n        (document.querySelector(\"#import-graph-g4\") as HTMLAnchorElement).innerText = \"Graph G4\";\n\n        (document.querySelector(\"#setBackgroundDropdown\") as HTMLAnchorElement).innerText = languages.current.SetBackground;\n        (document.querySelector(\"#blank-background\") as HTMLAnchorElement).innerText = \"Reset\";\n        (document.querySelector(\"#import-verkehrskreuzung\") as HTMLAnchorElement).innerText = \"Verkehrskreuzung\";\n        (document.querySelector(\"#import-schweiz\") as HTMLAnchorElement).innerText = \"Karte der Schweiz\";\n        (document.querySelector(\"#import-sudoku-4x4\") as HTMLAnchorElement).innerText = \"Sudoku 4x4\";\n\n        (document.querySelector(\"#calculate-all-properties-link\") as HTMLAnchorElement).innerText = languages.current.CalculateAllProperties;\n        (document.querySelector(\"#new-graph-layout-link\") as HTMLAnchorElement).innerText = languages.current.NewGraphLayout;\n        (document.querySelector(\"#graph-options-link\") as HTMLAnchorElement).innerText = languages.current.GraphOptions;\n        (document.querySelector(\"#print-help-link\") as HTMLAnchorElement).innerText = languages.current.Help;\n\n        (document.querySelector(\"#example-graphs-label\") as HTMLHeadingElement).innerText = languages.current.ExampleGraphs;\n        (document.querySelector(\"#load-petersen-link\") as HTMLAnchorElement).innerText = languages.current.LoadPetersen;\n        (document.querySelector(\"#load-konigsberg-link\") as HTMLAnchorElement).innerText = languages.current.LoadKonigsberg;\n        (document.querySelector(\"#load-complete-link\") as HTMLAnchorElement).innerText = languages.current.LoadComplete;\n        (document.querySelector(\"#load-cycle-link\") as HTMLAnchorElement).innerText = languages.current.LoadCycle;\n        (document.querySelector(\"#load-wheel-link\") as HTMLAnchorElement).innerText = languages.current.LoadWheel;\n        (document.querySelector(\"#load-hypercube-link\") as HTMLAnchorElement).innerText = languages.current.LoadHypercube;\n        (document.querySelector(\"#load-custom-link\") as HTMLAnchorElement).innerText = languages.current.LoadCustom;\n\n        (document.querySelector(\"#algorithms-label\") as HTMLHeadElement).innerText = languages.current.Algorithms;\n\n        (document.querySelector(\"#graph-properties-label\") as HTMLHeadElement).innerText = languages.current.GraphProperties;\n        (document.querySelector(\"#results-label\") as HTMLHeadElement).innerText = languages.current.Results;\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            languages.current.Help,\n            languages.current.IssuesHTML\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n\n                // if (window.settings.getOption(\"direction\") !== vals[1]) {\n                //     window.settings.changeOption(\"direction\", vals[1]);\n                //     let G = GraphState.graph;\n                //     G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                //     // Clear node coloring because graph color doesn't apply to directed graphs\n                //     window.main.setData(GraphState.getGraphData(G, true));\n                // }\n                // if (window.settings.getOption(\"weights\") !== vals[2]) {\n                //     window.settings.changeOption(\"weights\", vals[2]);\n                //     let G = GraphState.graph;\n                //     G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                //     window.main.setData(GraphState.getGraphData(G));\n                // }\n                // if (window.settings.getOption(\"customColors\") !== vals[1]) {\n                //     window.settings.changeOption(\"customColors\", vals[1]);\n                // }\n                if (window.settings.getOption(\"smoothEdges\") !== vals[1]) {\n                    window.settings.changeOption(\"smoothEdges\", vals[1]);\n\n                    window.network.setOptions({ edges: { smooth: vals[1] } });\n                    let G = GraphState.graph;\n                    window.main.setData(GraphState.getGraphData(G));\n                    \n                }\n\n                if (window.settings.getOption(\"fastColorChange\") !== vals[2]) {\n                    window.settings.changeOption(\"fastColorChange\", vals[2]);                  \n                }\n\n                if (window.settings.getOption(\"stepByStepInfo\") !== vals[3]) {\n                    window.settings.changeOption(\"stepByStepInfo\", vals[3]);                  \n                }\n\n            },\n            languages.current.Options,\n            languages.current.Save,\n            [\n                {\n                    label: languages.current.GraphPhysics,\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n\n                // {\n                //     label: languages.current.DiGraph,\n                //     initialValue: window.settings.getOption(\"direction\"),\n                //     type: \"checkbox\"\n                // },\n                // {\n                //     label: languages.current.WeightedGraph,\n                //     initialValue: window.settings.getOption(\"weights\"),\n                //     type: \"checkbox\"\n                // },\n                // {\n                //     label: languages.current.CustomNodeColors,\n                //     initialValue: window.settings.getOption(\"customColors\"),\n                //     type: \"checkbox\"\n                // }\n                {\n                    label: languages.current.SmoothEdges,\n                    initialValue: window.settings.getOption(\"smoothEdges\"),\n                    type: \"checkbox\"\n                },\n                \n                {\n                    label: languages.current.FastColorChange,\n                    initialValue: window.settings.getOption(\"fastColorChange\"),\n                    type: \"checkbox\"\n                },\n\n                {\n                    label: languages.current.StepByStepInfo,\n                    initialValue: window.settings.getOption(\"stepByStepInfo\"),\n                    type: \"checkbox\"\n                }\n\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        // Cleanup state\n        GraphState.workerPool = [];\n        UIInteractions.stopLoadingAnimation();\n        UIInteractions.isRunning = {};\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = languages.current.ThisTask;\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            languages.current.TaskAlreadyRunning,\n            \"<p>\" + help.stringReplacement(languages.current.TaskAlreadyRunningBody, n) + \"</p>\"\n        );\n    }\n\n    static getAllDegrees(): Promise<void> {\n        const myName = languages.current.GetAllDegrees;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            let a = { degrees: [] };\n\n            \n\n            const printGAD = () => {\n            \n                const degrees = a.degrees;\n\n                let p = \"\";\n                \n                degrees.forEach((v,i) => {\n                    p += help.stringReplacement(languages.current.VertexHasDegree, GraphState.nodeIDToLabel(i) + \"\", v + \"\") + \"\\n\";\n                });\n\n                p = `<h3>${languages.current.GetAllDegreesTitle}</h3><hr>${help.htmlEncode(p)}`;\n\n                help.printout(p);\n                \n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            \n            const w = UIInteractions.getWorkerIfPossible(e => {\n                a = e.data;\n                printGAD();\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n            w.send({\n                type: \"getAllDegreesWrapper\",\n                args: [],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n            \n        });\n    }\n\n    static checkGraphColoring(): Promise<void> {\n        const myName = languages.current.CheckColoring;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            let a = { from: [], to: [],  num: -1, confList: []};\n\n            const printCC = () => {\n                let p = help.stringReplacement(languages.current.NumberOfConflicts, a.num + \"\");\n\n                const conflist = a.confList;\n                \n                p += \"\\n\\n\";\n\n                conflist.forEach((v,i) => {\n                    p += help.stringReplacement(languages.current.NodeIsInConflictWith, (i+1).toString(), GraphState.nodeIDToLabel(v[0]), GraphState.nodeIDToLabel(v[1]) + \"\") + \"\\n\";\n                });\n\n                p = `<h3>${languages.current.CheckColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n\n                help.printout(p);\n                \n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            \n            const w = UIInteractions.getWorkerIfPossible(e => {\n                a = e.data;\n                printCC();\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n            w.send({\n                type: \"checkColoringByString\",\n                args: [],\n                graph: window.main.graphState.getGraphData(),\n                convertToGraphImmut: true\n            });\n            \n        });\n    }\n\n    static resetgraphColoringGreedy(): Promise<void> {\n\n        return new Promise<void>(async resolve => {\n            GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = null;\n            GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n            GraphState.state.graphColoringGreedy = null;\n        });\n\n    }\n\n    static makeAndPrintgraphColoringWelsh(): Promise<void> {\n        const myName = languages.current.GraphColoringWelsh;\n\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Approx. Chromatic Greedy\")) as number,\n                colors: GraphState.state.graphColoringGreedy as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties.colormode = 2;\n                GraphState.graphProperties[\"Approx. Chromatic Greedy\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Approx. Chromatic Greedy\", \"graphColoringGreedy\"]);\n                (GraphState.state.graphColoringGreedy as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n\n                // p += `\\nApprox. Chromatic Number from Welsh algorithm: ${a.chromaticNumber}`;\n\n                let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += \"\\n\" + help.stringReplacement(languages.current.ChromaticNumberIs, a.chromaticNumber + \"\");\n\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                });\n\n                /*help.printout(p)\n                if (!confirm(\"Do you want to continue\")) {\n                    window.main.applyColors();\n                    return;    \n                }*/\n                \n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>${languages.current.GraphColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n                p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoringGreedy\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetworkWelsh\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n            }\n        });\n    }\n\n    \n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = languages.current.FordFulkerson;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>${languages.current.FordFulkerson}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                        help.htmlEncode(GraphState.nodeIDToLabel(source)), help.htmlEncode(GraphState.nodeIDToLabel(sink)))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `${languages.current.FordFulkersonMaxFlowMinCut} ${help.stringReplacement(languages.current.MaxFlowFromAToB,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.maxFlow + \"\")}`;\n                    p += `\\n\\n${languages.current.UsingCapacities}\\n\\n`;\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += help.stringReplacement(languages.current.FlowWithCapacity, GraphState.nodeIDToLabel(v.from),\n                            GraphState.nodeIDToLabel(v.to), v.flow + \"\", v.capacity + \"\");\n                        p += \"\\n\";\n                    });\n                    p = p.trim();\n                    p = `<h3>${languages.current.FordFulkersonMaxFlowMinCut}</h3><hr>` + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            languages.current.FordFulkersonMaxFlowMinCut,\n            languages.current.Go,\n            [\n                {\n                    label: languages.current.SourceNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: languages.current.SinkNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ],\n            ($modal) => {\n                UIInteractions.isRunning[myName] = false;\n                $modal.modal(\"hide\");\n            }\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = languages.current.KruskalMST;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = help.stringReplacement(languages.current.KruskalMSTTotalWeight, a.totalWeight + \"\");\n            p += `\\n\\n${languages.current.UsingEdges}\\n\\n`;\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>${languages.current.KruskalMST}</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = languages.current.Cyclic;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = languages.current.TopoSort;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(languages.current.TopoSortErrorHTML);\n                return;\n            }\n\n            let p = languages.current.TopoSort + \":\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>${languages.current.TopoSort}</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    // display only the graph algorithms that are suited for directional, weighted graphs\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\n\nimport \"bootstrap\";\nimport { Network } from \"vis-network\";\nimport { default as main, MainI } from \"./main\";\nimport Settings from \"./settings\";\nimport UI from \"./UIInteractions\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\ndeclare global {\n    interface Window {\n        main: MainI;\n        network: Network;\n        settings: typeof Settings;\n        ui: typeof UI;\n        Worker: Function;\n    }\n}\n\nwindow.main = main;\nwindow.settings = Settings;\n\nlanguages.setLanguage().then(() => {\n    window.ui = UI;\n    window.ui.registerListeners();\n\n    main.visOptions.locales = languages.current.VisLocale;\n    main.visOptions.locale = \"\";\n    window.network = new Network(main.container, {}, main.visOptions);\n    Settings.loadSettings();\n\n    main.addNetworkListeners(window.network);\n\n    let loadDefault = true;\n    if (Settings.checkForLocalStorage()) {\n        const s = localStorage.getItem(\"graphPlayground.lastState\");\n        if (s !== null) {\n            const jsonGraph: any = JSON.parse(s);\n            if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\n                loadDefault = false;\n                main.applyState(false, jsonGraph as { graph: GraphPlain });\n            }\n        }\n    }\n    if (loadDefault) {\n        (async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            main.setData(predefined.Petersen(), false, true, true);\n        })();\n    }\n});\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n                edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if(typeof node === \"undefined\"){\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    getNodeForColor(id: number): NodeImmut | boolean {\n        const node = this.nodes.get(id);\n        if (typeof node === \"undefined\") {\n            return false;\n        }\n\n        return node;\n    }\n\n    getNonDefaultColor(): { [node: number] : number } {\n        \n        const customColorPalleteArrayNonDefault = [\"....\", \"#ff3f3f\", \"#ffbf64\", \"#ffff00\", \"#00ff80\", \"#66ccff\", \"#f964ff\"];\n\n        const constrainedColoring : { [node: number] : number } = {};\n\n        this.nodes.forEach((n) => {\n            let curNode = n.getID();\n            let currentColor = n.getAttribute('color');\n            \n            if ( !(currentColor === null || currentColor === undefined || currentColor === \"DEFAULT\" || currentColor ===\"#ffffff\") && customColorPalleteArrayNonDefault.includes(currentColor) ) {\n                constrainedColoring[curNode] = customColorPalleteArrayNonDefault.indexOf(currentColor);\n            }\n        });\n\n        return constrainedColoring;\n\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            {color: color}));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    getAllInOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n            \n            if (degrees.includes(edge.getTo())) {\n                degrees[edge.getTo()]++;\n            }\n            else {\n                degrees[edge.getTo()] = 1;\n            }\n            \n\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    // MH: Adjacency matrix\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nimport help from \"../../util/genericHelpers\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nconst capitalLetters = help.deepFreeze([\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]) as string[];\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            // MH: If the id is an integer number and between 0 and 25, than take a capital letter from the alphabet as label\n            if (typeof id === \"number\" && (id >= 0 && id <=25)) {\n                this.label = capitalLetters[id];\n            } else {\n                this.label = id.toString();\n            }\n            \n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport { DataSet } from 'vis-data';\nimport { Node, Edge } from 'vis-network';\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ninterface UpToDateProperties {\n    name: string;\n    upToDate: boolean;\n    type: string;\n    always?: boolean;\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\n    [index: string]: undefined | string | boolean | ((ignoreDuplicate?: boolean) => any)\n}\n\ninterface GraphProperties {\n    vertices: number;\n    edges: number;\n    colormode: number;\n    eulerian: boolean;\n    \"Approx. Chromatic Greedy\": number | null;\n    \"Connected Components\": number | null;\n    \"Strongly Connected Components\": number | null;\n    \"Most recent k-color check\": number | null;\n    \"Current best guess of chromatic number\": number | null;\n    cyclic: boolean;\n\n    [index: string]: boolean | number | null;\n}\n\ninterface GraphStateData {\n    stronglyConnectedComponents: null | { [key: number]: number };\n    connectedComponents: null | { [key: number]: number };\n    graphColoringGreedy: null | number[];\n    kColorable: null | { [key: number]: number[] };\n\n    [index: string]: null | number[] | { [key: number]: number } | { [key: number]: number[] };\n}\n\nexport interface AddNodeI {\n    id?: number\n    label: string;\n    x: number;\n    y: number;\n    color?: string;\n}\n\nexport interface GraphStateHistory {\n    upToDate: UpToDateProperties[];\n    state: GraphStateData;\n    graph: GraphImmut;\n    graphProperties: GraphProperties;\n    [index: string]: UpToDateProperties[] | GraphStateData | GraphImmut | GraphProperties;\n}\n\nconst getInt = (v: string | number): number => {\n    if (typeof v === 'number') {\n        return v;\n    }\n    return parseInt(v);\n};\n\nexport default class GraphState {\n    public static workerPool: (Worker | null)[] = [];\n    public static backHistory: GraphStateHistory[] = [];\n    public static forwardHistory: GraphStateHistory[] = [];\n    public static maxHistory = 10;\n    public static upToDate: UpToDateProperties[] = [\n        {\n            name: \"Approx. Chromatic Greedy\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.resetgraphColoringGreedy();\n                \n            }\n        },\n        {\n            name: \"graphColoringGreedy\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return window.ui.resetgraphColoringGreedy();\n            }\n        },\n        {\n            name: \"Most recent k-color check\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"Current best guess of chromatic number\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"colormode\", upToDate: false, type: \"property\"\n        },\n        {\n            name: \"kColorable\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return null;\n            }\n        },\n        { name: \"vertices\", upToDate: true, always: true, type: \"property\" },\n        { name: \"edges\", upToDate: true, always: true, type: \"property\" },\n        {\n            name: \"eulerian\", upToDate: false, type: \"property\",\n            applyFunc: (i) => {\n                return window.ui.makeAndPrintEulerian(i);\n            }\n        },\n        {\n            name: \"Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"cyclic\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintIsCyclic();\n            }\n        },\n    ];\n    public static state: GraphStateData = {\n        stronglyConnectedComponents: null,\n        connectedComponents: null,\n        graphColoringGreedy: null,\n        kColorable: null\n    };\n    public static graph: GraphImmut;\n    public static graphProperties: GraphProperties = {\n        vertices: 0,\n        edges: 0,\n        colormode: 0,\n        eulerian: false,\n        \"Approx. Chromatic Greedy\": null,\n        \"Connected Components\": null,\n        \"Strongly Connected Components\": null,\n        \"Most recent k-color check\": null,\n        \"Current best guess of chromatic number\": null,\n        cyclic: false,\n    };\n\n    static setUpToDate(value = false, listOptions?: string[]) {\n        const all = listOptions === null || typeof listOptions === \"undefined\";\n        let property = false;\n        GraphState.upToDate.forEach((v) => {\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\n                v.upToDate = value;\n                if (v.type === \"property\") {\n                    property = true;\n                }\n            }\n        });\n        if (property) {\n            GraphState.makeAndPrintProperties();\n        }\n    }\n\n    static async getProperty(property: keyof GraphProperties, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\n        const a = GraphState.upToDate.find((v) => {\n            return (\"name\" in v && v.name === property);\n        })!;\n        if (!a.upToDate) {\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\n                await a.applyFunc(ignoreDuplicate);\n            }\n            else {\n                return null;\n            }\n        }\n        if (a.type === \"state\") {\n            return Promise.resolve(GraphState.state[property]);\n        }\n        return Promise.resolve(GraphState.graphProperties[property]);\n    }\n\n    static async makeAndPrintProperties(recalcLong = false) {\n        const directional = window.settings.getOption(\"direction\");\n\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\n\n        if (!directional) {\n            await GraphState.getProperty(\"eulerian\", true, true);\n        }\n\n        const p = Object.keys(GraphState.graphProperties);\n        if (recalcLong) {\n            p.forEach(async (v) => {\n                await GraphState.getProperty(v, true);\n            });\n        }\n\n        const printableProperties: any = {};\n        await Promise.all(p.map(async (v) => {\n            printableProperties[v] = await GraphState.getProperty(v);\n        }));\n\n        GraphState.printGraphProperties(printableProperties);\n    }\n\n    static printGraphProperties(properties: any) {\n        let p = \"\";\n        Object.keys(properties).forEach((k) => {\n            if (properties[k] !== null) {\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\n            }\n        });\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    private static updateGraph(graph = GraphState.graph) {\n        let nodes = graph.getAllNodes() as NodeImmutPlain[];\n        let edges = graph.getAllEdges() as EdgeImmutPlain[];\n        if (!window.settings.getOption(\"customColors\")) {\n            nodes = GraphState.clearColorFromNodes(nodes);\n            edges = GraphState.clearColorFromEdges(edges);\n        }\n        window.main.setData({ nodes, edges });\n    }\n\n    static resetColor() {\n        const saveState = window.settings.getOption(\"customColors\");\n        window.settings.changeOption(\"customColors\", false);\n        this.updateGraph();\n        window.settings.changeOption(\"customColors\", saveState);\n    }\n\n    static repaint() {\n        this.updateGraph();\n    }\n\n    static addEdge(from: number | string, to: number | string, weight = 0, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\n        this.updateGraph(graph);\n    }\n\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\n        graph = graph.addNode({ label: data.label, x: data.x, y: data.y, color: data.color });\n        this.updateGraph(graph);\n    }\n\n    static editNode(id: number | string, label: string, color?: string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        graph = graph.editNode(iId, { label, color });\n        window.main.setData(GraphState.getGraphData(graph), false, false);\n    }\n\n    static editEdge(from: number | string, to: number | string,\n        newWeight: number, oldWeight: number, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\n        if (newGraph instanceof GraphImmut) {\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\n        }\n    }\n\n    static deleteEdge(from: number | string, to: number | string, weight: (undefined | null | number) = null, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\n        this.updateGraph(graph);\n    }\n\n    static deleteNode(id: number | string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        const newGraph = graph.deleteNode(iId);\n        if (newGraph instanceof GraphImmut) {\n            this.updateGraph(newGraph);\n        }\n    }\n\n    static checkAdjacency(from: number | string, to: number | string , graph = GraphState.graph): boolean {\n        const nodeFrom = getInt(from);\n        const nodeTo = getInt(to);\n        return graph.areAdjacent(nodeFrom, nodeTo);\n    }\n\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\n        nodes.forEach((v) => {\n            v.color = null;\n        });\n        return nodes;\n    }\n\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\n        edges.forEach((v) => {\n            delete v.color;\n        });\n        return edges;\n    }\n\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\n        const n = graph.getNode(id, true);\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\n            return n.getLabel().trim();\n        }\n\n        return id.toString();\n    }\n\n    // Preferentially search by ID, label, and case-insensitive label\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\n        let n = graph.getAllNodes(true) as NodeImmut[];\n        n = n.filter((node) => {\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\n        });\n\n        if (n.length === 0) {\n            return -1;\n        }\n        else if (n.length === 1) {\n            return n[0].getID();\n        }\n\n        let rID = -1;\n        let found = false;\n\n        n.forEach((node) => {\n            if (!found && node.getID().toString() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        return rID;\n    }\n\n    // Return graph as a Vis compatible dataset\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<Node>; edges: DataSet<Edge> } {\n        const d = GraphState.getGraphData(graph);\n        if (graph.isWeighted()) {\n            d.edges.forEach((e) => {\n                e.label = e.weight.toString();\n            });\n        }\n        d.edges.forEach((e) => {\n            if ('color' in e) {\n                e.color = { color: e.color };\n            }\n        });\n\n        return { nodes: new DataSet(d.nodes as Node[]), edges: new DataSet(d.edges as Edge[]) };\n    }\n\n    static setLocations(locations: { [key: string]: { x: number; y: number } }, graph = GraphState.graph): GraphImmut {\n        let newNodes = graph.getAllNodesAsImmutableList();\n        Object.keys(locations).forEach((i) => {\n            const v = locations[i];\n            const node = newNodes.get(parseInt(i))!;\n            // Only change when there is actually a new position\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\n                // Batch up all changes that we'll be making\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), { x: v.x, y: v.y }));\n            }\n        });\n\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\n    }\n\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\n        return {\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\n            directed: graph.isDirected(),\n            weighted: graph.isWeighted()\n        };\n    }\n}\n","import EN_US from \"src/EN_US\";\n\nexport enum Languages {\n    EN_US = \"EN_US\",\n\n}\n\nexport let current = {} as typeof EN_US;\n\n\nexport const setLanguage = async () => {\n    current = (await import(`../${window.settings.getOption(\"language\") || Languages.EN_US}.ts`)).default;\n};\n","\"use strict\";\n\nimport gHelp from './util/graphHelpers';\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport randomColor from 'randomcolor';\nimport GraphState, { AddNodeI, GraphStateHistory } from './graphState';\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport { Network, Node as VisNode, Edge } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport * as languages from \"./languages\";\n\n\nexport interface MainI {\n    graphState: typeof GraphState;\n    container: HTMLElement;\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\n    visOptions: {\n        edges: { smooth: boolean, color: {inherit: boolean}};\n        nodes: { color: { border: string, background: string, \n                            highlight: { border: string, background: string}, \n                            hover : { border: string, background: string}\n                        }\n                };\n        interaction: { hover: boolean };\n        manipulation: {\n            addNode: (data: AddNodeI, callback: Function) => void;\n            editNode: (data: AddNodeI, callback: Function) => void;\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\n        },\n        locale?: string,\n        locales?: any,\n    };\n    cancelEdit: (callback: Function) => void;\n    saveData: (data: any, callback: Function, operation: string, label: string, color: string) => Promise<void>;\n    nodeLabelIDValidator: (v: string) => (boolean | string);\n    applyColors: () => Promise<void>;\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\n    saveState: () => void;\n    getStateForSaving: () => GraphStateHistory;\n    undo: () => void;\n    redo: () => void;\n    applyState: (undo?: boolean, newState?: any) => void;\n    saveStateLocalStorage: () => void;\n    shuffleNetworkLayout: () => void;\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\n    addNetworkListeners: (network: Network) => void\n}\n\ninterface VisNetworkEvent {\n    edges: DataSet<Edge>;\n    nodes: DataSet<VisNode>;\n}\n\ninterface VisNetworkInternals extends Network {\n    layoutEngine: {\n        randomSeed: number,\n        initialRandomSeed: number\n    }\n}\n\ninterface VisEditEdgeInternal {\n    from: { id: string | number };\n    to: { id: string | number };\n    label?: string\n}\n\ninterface VisEdgeInternal {\n    from: string | number;\n    to: string | number;\n    id: string;\n    label?: string\n}\n\nconst customColorPallete = {\n    \"not colored\": \"DEFAULT\",\n    \"1: red\": \"#ff3f3f\",\n    \"2: orange\": \"#ffbf64\",\n    \"3: yellow\": \"#ffff00\",\n    \"4: green\": \"#00ff80\",\n    \"5: blue\": \"#66ccff\",\n    \"6: violet\": \"#f964ff\"\n};\n  \n\n //    { type: \"select\", label: \"Color\", optionValues: [0, 1, 2, 3, 4, 5], optionText: [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"], initialValue: 0}\n                //]);\n// const basicColors = ['#ff3f3f ', '#ffbf64', '#ffff00', '#00ff80', '#00a0ff', '#f964ff'];\n\nconst self: MainI = {\n    graphState: GraphState,\n    container: document.getElementById('network')!,\n    // Function used to overwrite the edge edit functionality when weights are active\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\n        help.showFormModal(($modal, vals) => {\n            callback(null);\n            $modal.modal(\"hide\");\n            const value = parseFloat(vals[0]);\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\n        }, languages.current.EditEdge, languages.current.Save, [\n            {\n                type: \"numeric\",\n                label: languages.current.WeightCapacity,\n                initialValue: parseFloat(data.label!)\n            }\n        ]);\n    },\n    visOptions: {\n        edges: { smooth: false, color: {inherit: false}},\n        nodes: { color: { border: \"#000000\", background: \"#ffffff\",\n                            highlight: { border: \"#000000\", background: \"#e6e6e6\" }, \n                            hover : { border: \"#000000\", background: \"#e6e6e6\"}\n                }},\n        interaction: { hover: true },\n        manipulation: {\n            addNode: async (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, await GraphState.getProperty(\"vertices\"))}</p>`\n                    },\n\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: gHelp.generateLabelFromNumber(await GraphState.getProperty(\"vertices\")) }\n\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete) });\n                }\n                const $popup = help.makeFormModal(languages.current.AddNode, languages.current.Save, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            editNode: (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const initialColor = Object.getOwnPropertyNames(data.color).includes(\"background\") ? (data.color as any).background : \"white\";\n\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, data.id + \"\")}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: data.label },\n\n                //    { type: \"select\", label: \"Color\", optionValues: [0, 1, 2, 3, 4, 5], optionText: [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"], initialValue: 0}\n                //]);\n\n\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete), initialValue: initialColor });\n                }\n                const $popup = help.makeFormModal(languages.current.EditNode, languages.current.Save, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                    window.network.addEdgeMode();\n                };\n                if (data.from === data.to) {\n                    alert(languages.current.ConnectNodeToItselfAlert);\n                    return;\n                }\n                else if (GraphState.checkAdjacency(data.from, data.to)) {\n                    alert(languages.current.AlreadyConnectedNodes);\n                    return;\n                }\n\n                apply();\n            },\n            /*addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                };\n                if (data.from === data.to) {\n                    if (confirm(languages.current.ConnectNodeToItselfConfirmation)) {\n\n                        apply();\n                    }\n                    return;\n                }\n\n                apply();\n            },*/\n            editEdge: (data, callback) => {\n                callback(null);\n                self.visOptions.manipulation.deleteEdge({ edges: [data.id] });\n                self.visOptions.manipulation.addEdge(data);\n            },\n            deleteEdge: (data, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(null);\n                }\n                data.edges.forEach((v: any) => {\n                    let weight = null;\n                    const edge = (window.network as any).body.data.edges.get(v);\n                    const weightFromLabel = edge.label;\n                    if (typeof weightFromLabel !== \"undefined\") {\n                        weight = parseFloat(weightFromLabel);\n                    }\n\n                    GraphState.deleteEdge(edge.from, edge.to, weight);\n                });\n            },\n            deleteNode: (data, callback) => {\n                callback(null);\n                data.nodes.forEach((v: string) => {\n                    GraphState.deleteNode(v);\n                });\n            },\n        },\n    },\n\n    cancelEdit: (callback) => {\n        if (typeof callback === \"function\") {\n            callback(null);\n        }\n    },\n\n    saveData: async (data, callback, operation, label, color) => {\n        callback(null);\n\n        data.label = label;\n        data.color = color;\n        if (color === \"DEFAULT\") {\n            data.color = undefined;\n        }\n        if (operation === \"add\") {\n            GraphState.addNode(data);\n        }\n        else if (operation === \"editNode\") {\n            GraphState.editNode(data.id, data.label, data.color);\n        }\n    },\n\n    nodeLabelIDValidator: (v) => {\n        if (GraphState.nodeLabelToID(v) > -1) {\n            return true;\n        }\n        return languages.current.InvalidLabelOrId;\n    },\n\n    applyColors: async () => {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const coloring = GraphState.graphProperties.colormode;\n\n        let graphColors : any;\n        let chromaticNumber : any;\n\n        if (coloring == 1) {\n            chromaticNumber = await GraphState.getProperty(\"Most recent k-color check\");\n            const graphKColorable = await GraphState.getProperty(\"kColorable\", true);\n            graphColors = graphKColorable[chromaticNumber];\n            \n        }\n        else if (coloring === 2) {\n            graphColors = await GraphState.getProperty(\"graphColoringGreedy\", true);\n            chromaticNumber = await GraphState.getProperty(\"Approx. Chromatic Greedy\", true);\n        }\n        else {\n            alert(\"No correct colormode\");\n            return;\n        }\n\n        \n            // \"not colored\": \"DEFAULT\", --> white \"#ffffff\"\n            // \"1: red\": \"#ff3f3f\",\n            // \"2: orange\": \"#ffbf64\",\n            // \"3: yellow\": \"#ffff00\",\n            // \"4: green\": \"#00ff80\",\n            // \"5: blue\": \"#66ccff\",\n            // \"6: violet\": \"#f964ff\"\n        \n\n        const basicColors = ['#ffffff', '#ff3f3f', '#ffbf64', '#ffff00', '#00ff80', \"#66ccff\", '#f964ff'];\n        const addColors = randomColor({ count: chromaticNumber > 6 ? chromaticNumber - 6 : 1, luminosity: \"light\" });\n\n        const colors = [...basicColors, ...addColors];\n\n        let G = GraphState.graph;\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\n            G = G.editNode(v.id, { color: colors[graphColors[v.id]] });\n        });\n        self.setData(GraphState.getGraphData(G), false, false);\n    },\n\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\n        \n        // Store existing positions in the data if we're supposed to keep the layout\n        if (rearrangeGraph) {\n            data.nodes.forEach((v) => {\n                delete v.x;\n                delete v.y;\n            });\n        }\n\n        if (graphChanged) {\n            self.saveState();\n        }\n\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\n            window.settings.changeOption(\"direction\", data.directed);\n        }\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\n            window.settings.changeOption(\"weights\", data.weighted);\n        }\n        const directional = window.settings.getOption(\"direction\") as boolean;\n        const weighted = window.settings.getOption(\"weights\") as boolean;\n\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\n        GraphState.graph = g;\n\n        // Set a new random seed so that the layout will be different\n        self.randomizeNetworkLayoutSeed(window.network as unknown as VisNetworkInternals);\n        window.network.setData(GraphState.getGraphAsDataSet(g));\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\n\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        if (graphChanged) {\n            window.ui.stopLoadingAnimation();\n            window.ui.isRunning = {};\n            window.ui.terminateAllWebWorkers();\n            window.ui.printGraphAlgorithms();\n            help.printout(\"\");\n            GraphState.setUpToDate();\n            GraphState.makeAndPrintProperties(recalcProps);\n        }\n\n        self.saveStateLocalStorage();\n    },\n\n    saveState: () => {\n        if (GraphState.graph === null) {\n            return;\n        }\n\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\n            GraphState.backHistory.shift();\n        }\n\n        GraphState.backHistory.push(self.getStateForSaving());\n        GraphState.forwardHistory = [];\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n    },\n\n    getStateForSaving: () => {\n        const state: any = {};\n        Object.keys(GraphState).forEach((k: string) => {\n            const v: any = (GraphState as any)[k];\n            if (typeof v !== \"function\") {\n                if (typeof v !== \"object\") {\n                    state[k] = v;\n                }\n                else {\n                    if (k === \"graph\" && v !== null) {\n                        state[k] = v;\n                    }\n                    if (!k.toLowerCase().includes(\"history\")) {\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\n                    }\n                }\n            }\n        });\n\n        return state as GraphStateHistory;\n    },\n\n    undo: () => {\n        if (GraphState.backHistory.length > 0) {\n            self.applyState(true);\n        }\n    },\n\n    redo: () => {\n        if (GraphState.forwardHistory.length > 0) {\n            self.applyState(false);\n        }\n    },\n\n    applyState: (undo = true, newState: null | GraphStateHistory = null) => {\n        const firstLoad = newState !== null;\n        const currentState = self.getStateForSaving();\n\n        if (!firstLoad) {\n            if (undo) {\n                newState = GraphState.backHistory.pop()!;\n            }\n            else {\n                newState = GraphState.forwardHistory.pop()!;\n            }\n        }\n\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\n\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\n\n        GraphState.graph = newState!.graph;\n\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        window.ui.printGraphAlgorithms();\n        help.printout(\"\");\n\n        Object.keys(newState!).forEach((k: string) => {\n            const v = newState![k];\n            if (typeof v !== \"object\") {\n                (GraphState as any)[k] = v;\n            }\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\n                if (k.toLowerCase() === \"uptodate\") {\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\n                    });\n                }\n                else {\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\n                }\n            }\n        });\n\n        GraphState.makeAndPrintProperties().then(() => {\n            if (undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.backHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.forwardHistory.push(currentState);\n            }\n            else if (!undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.forwardHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.backHistory.push(currentState);\n            }\n\n            self.saveStateLocalStorage();\n        });\n    },\n\n    saveStateLocalStorage: () => {\n        if (window.settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\n        }\n    },\n\n    shuffleNetworkLayout: () => {\n        self.setData({\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\n        }, false, false, true);\n    },\n\n    randomizeNetworkLayoutSeed: (network) => {\n        const r = Math.round(Math.random() * 1000000);\n        network.layoutEngine.randomSeed = r;\n        network.layoutEngine.initialRandomSeed = r;\n    },\n\n    addNetworkListeners: (network) => {\n        // Enable edit node/edge when double clicking\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\n                network.editEdgeMode();\n            }\n            if (\"nodes\" in p && p.nodes.length === 1 && window.settings.getOption(\"fastColorChange\")) {\n                \n                \n                const chosenNode = p.nodes as unknown as number[];\n                const nodeId = chosenNode[0];\n\n                const data = GraphState.graph.getNodeForColor(nodeId);\n\n                if (typeof data !== 'boolean') {\n                    const newColor = gHelp.toggleNodeColor(data);\n                    GraphState.editNode(data.getID(), data.getLabel(), newColor);\n                }\n                else {\n                    alert(\"Double-click selection of node doesn't work.\")\n                }\n\n            }\n            if (\"nodes\" in p && p.nodes.length === 1 && !window.settings.getOption(\"fastColorChange\")) {\n                network.editNode();\n            }\n        });\n\n        // Save locations of nodes after dragging\n        network.on(\"dragEnd\", () => {\n            GraphState.graph = GraphState.setLocations(network.getPositions());\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\n        });\n\n        // Delete nodes/edges when hit \"Delete\"\n        let lastNetworkClickEvent: Event | null = null;\n        network.on('click', (event) => {\n            lastNetworkClickEvent = event;\n        });\n\n        // Delete key to delete node or edge\n        document.addEventListener('keyup', (key) => {\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\n                        network.deleteSelected();\n                    }\n                }\n            }\n        });\n\n        // Undo/Redo keyboard commands\n        document.addEventListener(\"keydown\", (e) => {\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\n                self.redo();\n            }\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\n                self.undo();\n            }\n        });\n\n        // When clicking off of the network, remove the Delete functionality\n        document.addEventListener(\"click\", (e) => {\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\n                lastNetworkClickEvent = null;\n            }\n        });\n    },\n\n};\n\nexport default self;\n","\"use strict\";\ninterface SettingsList {\n    nodePhysics: boolean;\n    direction: boolean;\n    weights: boolean;\n    smoothEdges: boolean;\n    fastColorChange: boolean;\n    stepByStepInfo: boolean;\n\n    [index: string]: boolean;\n}\n\n// \"smoothEdges\"),\n//                     type: \"checkbox\"\n//                 },\n                \n//                 {\n//                     label: languages.current.FastColorChange,\n//                     initialValue: window.settings.getOption(\"fastColorChange\"),\n//                     type: \"checkbox\"\n//                 },\n\n//                 {\n//                     label: languages.current.StepByStepInfo,\n//                     initialValue: window.settings.getOption(\"stepByStepInfo\"),\n\nexport default class Settings {\n    private static readonly defaults: SettingsList = {\n        nodePhysics: false,\n        direction: false,\n        weights: false,\n        smoothEdges: false,\n        fastColorChange: false,\n        stepByStepInfo: false\n    };\n    private static current: any = {};\n\n    public static checkForLocalStorage() {\n        try {\n            const x = \"__storage_test__\";\n            localStorage.setItem(x, x);\n            localStorage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public static saveSettings() {\n        if (Settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\n        }\n    }\n\n    public static loadSettings() {\n        if (Settings.checkForLocalStorage()) {\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\n            if (settings === null) {\n                Settings.current = settings;\n            } else {\n                Settings.current = JSON.parse(settings);\n            }\n        }\n        if (Settings.current === null) {\n            Settings.current = {};\n        }\n        Settings.setAll();\n    }\n\n    public static setAll() {\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\n        if (Settings.getOption(\"weights\")) {\n            window.network.setOptions({\n                manipulation: {\n                    editEdge: {\n                        editWithoutDrag: window.main.visWeightEdgeEdit\n                    }\n                }\n            });\n        } else {\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\n        }\n    }\n\n    public static changeOption(option: string, value: string | boolean): void {\n        Settings.current[option] = value;\n        Settings.saveSettings();\n        Settings.setAll();\n    }\n\n    public static getOption(option: string): string | boolean {\n        if (option in Settings.current) {\n            return Settings.current[option];\n        }\n        return Settings.defaults[option];\n    }\n}\n","\"use strict\";\n\nimport * as $ from \"jquery\";\n\nexport declare interface ModalFormRow {\n    type: string;\n    label?: string;\n    initialValue?: any;\n    id?: string | number;\n    extraAttrs?: any;\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\n    clickDismiss?: boolean;\n    onclick?: (...args: any[]) => void;\n    optionText?: any[];\n    optionValues?: any[];\n}\n\ndeclare interface BasicMapType {\n    class: string;\n    id: string;\n    value: any;\n\n    [key: number]: any;\n\n    [key: string]: any;\n}\n\nconst defaultCancelCb = ($modal: JQuery) => {\n    $modal.modal(\"hide\");\n};\n\nconst self = {\n    deepCopy(deep: boolean, clone: any, copy: any) {\n        const isPlainObject = (obj: any) => {\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\n                return false;\n            }\n\n            let proto = Object.getPrototypeOf(obj);\n\n            if (!proto) {\n                return true;\n            }\n\n            // Objects with prototype are plain iff they were constructed by a global Object function\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return (\n                typeof Ctor === \"function\" &&\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n            );\n        };\n\n        let options,\n            name,\n            src,\n            copyIsArray,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\n            target = {};\n        }\n\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && Array.isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = self.deepCopy(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    },\n\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\n        Object.freeze(o);\n\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\n            if (\n                o.hasOwnProperty(prop) &&\n                (o as any)[prop] !== null &&\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\n                !Object.isFrozen((o as any)[prop])\n            ) {\n                self.deepFreeze((o as any)[prop]);\n            }\n        });\n\n        return o;\n    },\n\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\n        return [...arr].sort(compareFunction);\n    },\n\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\n        const r: any[] = [];\n        ds.forEach((v: { [index: string]: any }) => {\n            r.push(v[key]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\n        arr = arr.slice();\n        arr.forEach((v: any) => {\n            const k = Object.keys(v);\n            k.forEach(key => {\n                if (keys.indexOf(key) < 0) {\n                    delete v[key];\n                }\n            });\n        });\n        return self.deepFreeze(arr);\n    },\n\n    getFileExtension: (filename: string): string => {\n        return filename.split(\".\").splice(-1)[0];\n    },\n\n    htmlEncode: (string: string): string => {\n        const t = document.createElement(\"textarea\");\n        t.textContent = string;\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\n        return string;\n    },\n\n    printout: (text: string, escape?: string): void => {\n        if (escape) {\n            text = self.htmlEncode(escape);\n        }\n        document.getElementById(\"printout\")!.innerHTML = text;\n    },\n\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\n        const r: T[] = [];\n        Object.keys(map).forEach(i => {\n            r.push(map[i]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\n        const r: any = {};\n        Object.keys(map).forEach(i => {\n            if (map[i] in r) {\n                r[map[i]].push(i);\n            } else {\n                r[map[i]] = [i];\n            }\n        });\n        return self.deepFreeze(r);\n    },\n\n    max: (iterable: any[]): number => {\n        return iterable.reduce((a, b) => {\n            return Math.max(a, b);\n        });\n    },\n\n    toTitleCase: (str: string): string => {\n        return str.replace(/(?:^|\\s)\\w/g, match => {\n            return match.toUpperCase();\n        });\n    },\n\n    stringReplacement: (str: string, ...replacements: string[]) => {\n        return replacements.reduce((val, replacement, i) => {\n            return val.replace(`$${i + 1}`, replacement);\n        }, str);\n    },\n\n    showSimpleModal: (title: string, body: string): void => {\n        self.showFormModal(null, title, null, [{ type: \"html\", initialValue: body }], null, false);\n    },\n\n    makeFormModal: (title: string, successText: string | null, form: ModalFormRow[], footer = true): JQuery => {\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\n        form.forEach((formRow, i) => {\n            if (!(\"initialValue\" in formRow)) {\n                formRow.initialValue = \"\";\n            }\n\n            let id = \"form-modal-\" + i;\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\n                id = formRow.id;\n            }\n\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\n\n            if (\"extraAttrs\" in formRow) {\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\n                    }\n                });\n            }\n\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\n                validFunc = formRow.validationFunc;\n            }\n\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\n                const $v = $(event.target);\n                let val = $v.val();\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\n                    val = valueMutator(val);\n                }\n                const valid = validFunc!(val, $v);\n\n                if (valid === true) {\n                    $v.removeClass(\"is-invalid\")\n                        .next(\"#feedback-\" + i)\n                        .remove();\n                } else {\n                    $v.addClass(\"is-invalid\");\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\n                    }\n                }\n            };\n\n            if (formRow.type === \"html\") {\n                f.append($(formRow.initialValue));\n            } else if (formRow.type === \"checkbox\") {\n                basicMap.type = \"checkbox\";\n                basicMap.class = \"form-check-input\";\n                delete basicMap.value;\n                if (formRow.initialValue) {\n                    basicMap.checked = \"\";\n                }\n\n                f.append(\n                    $(\"<div>\", { class: \"form-check\" }).append(\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\n                            .text(formRow.label!)\n                            .prepend($(\"<input>\", basicMap))\n                    )\n                );\n            } else {\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\n\n                if (formRow.type === \"button\") {\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\n                        basicMap.class += \" btn-dismiss\";\n                    }\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\n                        $b.on(\"click\", formRow.onclick);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"numeric\") {\n                    basicMap.type = \"number\";\n                    f.append(\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\n                            generalValidator(e, parseFloat);\n                        })\n                    );\n                } else if (formRow.type === \"text\") {\n                    basicMap.type = \"text\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"file\") {\n                    basicMap.type = \"file\";\n                    basicMap.class = \"form-control-file form-control\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"textarea\") {\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\n                    if (\"onclick\" in formRow) {\n                        $b.on(\"click\", formRow.onclick!);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"select\") {\n                    const $options = $(\"<select>\", basicMap);\n                    formRow.optionText!.forEach((oText, oIndex) => {\n                        if (oIndex < formRow.optionValues!.length) {\n                            let selected = false;\n                            if (formRow.initialValue === formRow.optionValues![oIndex]) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex], selected }).text(oText));\n                        } else {\n                            let selected = false;\n                            if (formRow.initialValue === oText) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { selected }).text(oText));\n                        }\n                    });\n                    f.append($options.on(\"blur validate\", generalValidator));\n                }\n            }\n        });\n\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(\"Cancel\"));\n\n        if (footer === false) {\n            $footer = null;\n        }\n\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\n        $modal.append(\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\n                $(\"<div>\", { class: \"modal-content\" })\n                    .append(\n                        $(\"<div>\", { class: \"modal-header\" })\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\n                            .append(\n                                $(\"<button>\", {\n                                    class: \"close\",\n                                    \"data-dismiss\": \"modal\",\n                                    \"aria-label\": \"close\"\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\n                            )\n                    )\n                    .append(f)\n                    .append($footer!)\n            )\n        );\n        $modal\n            .find(\"input, textarea\")\n            .off(\"keyup\")\n            .on(\"keyup\", e => {\n                if (e.key === \"Enter\") {\n                    $(\".btn-success\")\n                        .last()\n                        .trigger(\"click\");\n                }\n            });\n        $modal.on(\"shown.bs.modal\", () => {\n            $modal\n                .find(\"input[type='text'], input[type='number'], textarea\")\n                .first()\n                .trigger(\"focus\");\n        });\n\n        return $modal;\n    },\n\n    showFormModal: (\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\n        title: string,\n        successText: string | null,\n        form: ModalFormRow[],\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\n        footer = true\n    ) => {\n        const $modal = self.makeFormModal(title, successText, form, footer);\n\n        $modal\n            .on(\"click\", \".btn-cancel\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                } else {\n                    $modal.modal(\"hide\");\n                }\n            })\n            .on(\"click\", \".btn-dismiss\", () => {\n                $modal.modal(\"hide\");\n            })\n            .on(\"click\", \".btn-success\", () => {\n                const vals: any[] = [];\n                let hasErrors = false;\n\n                $modal.find(\"input, textarea, select\").each((i, v) => {\n                    const $v = $(v);\n\n                    if (($v as any).tagName === \"SELECT\") {\n                        vals.push($v.find(\":selected\").val());\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\n                        vals.push($v.prop(\"checked\"));\n                    } else if ($v.attr(\"type\") === \"file\") {\n                        vals.push(($v.get(0) as any).files);\n                    } else if ($v.attr(\"type\") === \"number\") {\n                        vals.push(parseFloat($v.val() as string));\n                    } else {\n                        vals.push($v.val());\n                    }\n\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\n                        hasErrors = true;\n                    }\n                });\n\n                if (!hasErrors && typeof successCb === \"function\") {\n                    successCb($modal, vals);\n                }\n            })\n            .on(\"hidden.bs.modal\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                }\n                $modal.remove();\n            })\n            .modal(\"show\");\n    }\n};\n\nexport default self;\n","\"use strict\";\n\nimport gHelp from './graphHelpers';\nimport help from './genericHelpers';\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\nimport GraphImmut from '../classes/GraphImmut/GraphImmut';\n\ninterface Degree {\n    in: number;\n    out: number;\n}\n\nconst capitalLetters = help.deepFreeze([\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n]) as string[];\n\nexport default {\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\n        // Adjacency stores IDs of edges TO\n        const degrees: Degree[] = [];\n        adjacencyMatrix.forEach((v, i) => {\n            if (i in degrees) {\n                degrees[i].out += v.length;\n            }\n            else {\n                degrees[i] = {out: v.length, in: 0};\n            }\n            v.forEach((outV) => {\n                if (outV in degrees) {\n                    degrees[outV].in += 1;\n                }\n                else {\n                    degrees[outV] = {in: 1, out: 0};\n                }\n            });\n        });\n\n        return degrees;\n    },\n\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\n        const nodes: NodeImmutPlain[] = [];\n\n        // MH: TODO NOT REALLY CLEAN\n        window.settings.changeOption(\"customColors\", true);\n\n        edges.forEach((v) => {\n            nodes[v.from] = {id: v.from, label: gHelp.generateLabelFromNumber(v.from)};\n            nodes[v.to] = {id: v.to, label: gHelp.generateLabelFromNumber(v.to)};\n        });\n\n        return nodes;\n    },\n\n    generateLabelFromNumber : (prelabel: number) : string => {\n        if (typeof prelabel === \"number\" && (prelabel >= 0 && prelabel <=25)) {\n            return capitalLetters[prelabel];\n        } else {\n            return prelabel.toString();\n        }\n    },\n\n\n    compareColor : (color1: string | undefined | null, color2: string | undefined | null) => {\n        if (color1 === null || color1 === undefined) {\n            color1 = \"DEFAULT\";\n        }\n        if (color2 === null || color2 === undefined) {\n            color2 = \"DEFAULT\";\n        }\n\n        return color1 === color2;\n\n    },\n\n    // \"not colored\": \"DEFAULT\",\n    // \"1: red\": \"#ff3f3f\",\n    // \"2: orange\": \"#ffbf64\",\n    // \"3: yellow\": \"#ffff00\",\n    // \"4: green\": \"#00ff80\",\n    // \"5: blue\": \"#66ccff\",\n    // \"6: violet\": \"#f964ff\"\n\n    toggleNodeColor : (node: NodeImmut) : string | undefined => {\n        \n        const customColorPalleteArray = [\"DEFAULT\", \"#ff3f3f\", \"#ffbf64\", \"#ffff00\", \"#00ff80\", \"#66ccff\", \"#f964ff\"]; //'  ', '#97c2fc'];\n\n        const currentColor = node.getAttribute('color');\n\n        let currentIndex = 0;        \n\n        if (currentColor === null || currentColor === undefined) {\n            currentIndex = 0;\n        }\n        else {\n            const currentColorString = currentColor as string;\n            currentIndex = customColorPalleteArray.indexOf(currentColorString);\n        }\n\n        if (currentIndex === 6 || currentIndex < 0) {\n            return undefined;\n        }\n\n        if (currentIndex === 7) {\n            currentIndex = 0;\n        }\n\n        return customColorPalleteArray[(currentIndex+1)%7];\n    },\n\n    checkColoringByNumber : (color: number[], G: GraphImmut): boolean => {\n\n        const nodes = G.getAllNodes(true) as NodeImmut[];\n\n        const V = G.getNumberOfNodes();\n        for (let v = 0; v < V; v++) {\n            const vertexAdjacency = G.getNodeAdjacency(v);\n            const currentColor = color[v];\n\n            for (const i of vertexAdjacency) {\n                const conflict  = (currentColor === color[i]);\n                if (conflict && i > v) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n\n    },\n\n    nextColorIsSafe : (curNode: number, G: GraphImmut, color : number[], curColor: number): boolean => {\n        const V = G.getNumberOfNodes();\n        const vertexAdjacency = G.getNodeAdjacency(curNode);\n\n        for (let i = 0; i < vertexAdjacency.length; i++) {\n            if (color[vertexAdjacency[i]] === curColor) {\n                return false\n            }\n        }\n\n        return true;\n\n    }\n\n    \n\n};\n","var map = {\n\t\"./EN_US.ts\": [\n\t\t216,\n\t\t9,\n\t\t872\n\t],\n\t\"./custom.d.ts\": [\n\t\t883,\n\t\t7,\n\t\t883\n\t],\n\t\"./js/GraphAlgorithms.ts\": [\n\t\t446,\n\t\t9,\n\t\t446\n\t],\n\t\"./js/UIInteractions.ts\": [\n\t\t825,\n\t\t9\n\t],\n\t\"./js/app.ts\": [\n\t\t238,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/EdgeImmut.ts\": [\n\t\t268,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/GraphImmut.ts\": [\n\t\t536,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/NodeImmut.ts\": [\n\t\t729,\n\t\t9\n\t],\n\t\"./js/classes/SpanningTree.ts\": [\n\t\t866,\n\t\t9,\n\t\t866\n\t],\n\t\"./js/dataImportExport.ts\": [\n\t\t346,\n\t\t9,\n\t\t346\n\t],\n\t\"./js/graphState.ts\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./js/languages.ts\": [\n\t\t119,\n\t\t9\n\t],\n\t\"./js/main.ts\": [\n\t\t863,\n\t\t9\n\t],\n\t\"./js/settings.ts\": [\n\t\t660,\n\t\t9\n\t],\n\t\"./js/util/genericHelpers.ts\": [\n\t\t485,\n\t\t9\n\t],\n\t\"./js/util/graphHelpers.ts\": [\n\t\t641,\n\t\t9\n\t],\n\t\"./js/util/predefinedGraphs.ts\": [\n\t\t133,\n\t\t9,\n\t\t981\n\t],\n\t\"./js/workers/GraphAlgorithmWorker.ts\": [\n\t\t69,\n\t\t9,\n\t\t69\n\t],\n\t\"./js/workers/pwaServiceWorker.ts\": [\n\t\t304,\n\t\t7,\n\t\t304\n\t],\n\t\"./overloadTypes.d.ts\": [\n\t\t595,\n\t\t7,\n\t\t595\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 529;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + {\"69\":\"cc92aca7b4a9cc51f28f\",\"304\":\"e46e7228a4001a4da65b\",\"346\":\"23877dec54deb003eb34\",\"446\":\"67f96bccb4aaf86b4fe3\",\"595\":\"ab0534da15976842763e\",\"866\":\"a8ad73073b94ae1f7360\",\"872\":\"8b5622f096a1e432b934\",\"883\":\"c85793bacdb38e138bcf\",\"981\":\"76fcca577780e8cbd401\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t296: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgraphPlayground\"] = self[\"webpackChunkgraphPlayground\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(238)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","Worker_fn","Worker","possibleColorModes","makeAndPrintShortestPath","title","fn","weighted","myName","languages","current","ShortestPath","UIInteractions","isRunning","printAlreadyRunning","$modal","values","modal","source","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","e","a","data","cleanup","stopLoadingAnimation","p","NoPathFromAToB","toString","pathExists","ShortestPathFromAToB","distance","WithWeightedCost","cost","UsingPath","graph","GraphImmut","nodes","edges","directed","path","forEach","v","i","editEdge","window","main","setData","slice","includes","DijkstraError","DijkstraErrorHTML","BellmanFordError","BellmanFordErrorHTML","send","type","args","convertToGraphImmut","graphState","getGraphData","Go","label","StartNode","validationFunc","nodeLabelIDValidator","EndNode","makeAndPrintGreedyColoring","GraphColoringGreedy","orderingMode","chromaticNumber","colors","vertexOrder","ApproxChromaticNumberIs","historyToPrint","history","settings","getOption","step","length","curNode","nodeToColor","colAdjList","colorsOfNeighbors","neighbor","nb","VertexGetsColor","GraphColoringGreedyTitle","ReColor","applyColors","ColoringMode","optionText","Object","keys","optionValues","initialValue","makeAndPrintkColoringExact","mode","constrainedColoring","kColoringBruteForce","kColoringConstrainedBacktracking","kColoringBacktracking","options","NumberOfColors","NumberOfColorsPositiveError","push","NumberOfSteps","kColor","numberOfSteps","kColorable","bestChrNumber","Math","min","color","kColoringSuccess","kColoringTerminated","totalSteps","kColoringBruteForceTitle","kColoringBacktrackingTitle","ReColorInfo","kColoringFail","kColoringCheckedAll","kColoringDocStep1","kColoringDocStep2","Step","makeAndPrintComponents","stronglyConnected","cc","ConnectedComponents","componentKey","StronglyConnectedComponents","Promise","reject","TaskAlreadyRunning","count","components","NumberOfConnectedComponents","VertexIsInConnectedComponentNumber","JSON","stringify","id","listener","this","worker","postMessage","onmessage","terminate","getAlgorithms","name","GetAllDegrees","directional","applyFunc","getAllDegrees","display","CheckColoring","checkGraphColoring","BFS","Dijkstra","BellmanFord","FordFulkerson","makeAndPrintFFMCMF","KruskalMST","makeAndPrintKruskal","Cyclic","makeAndPrintIsCyclic","TopoSort","makeAndPrintTopologicalSort","Eulerian","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","document","querySelector","addEventListener","preventDefault","printHelp","terminateAllWebWorkers","printOptions","predefined","default","Petersen","Konigsberg","Complete","Cycle","Wheel","Hypercube","Custom","undo","redo","shuffleNetworkLayout","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","makeImportGraphExercise","setGraphBackground","innerText","File","ImportFile","ImportText","ExportFile","ExportText","LoadGraphs","SetBackground","CalculateAllProperties","NewGraphLayout","GraphOptions","Help","ExampleGraphs","LoadPetersen","LoadKonigsberg","LoadComplete","LoadCycle","LoadWheel","LoadHypercube","LoadCustom","Algorithms","GraphProperties","Results","IssuesHTML","vals","changeOption","network","setOptions","smooth","G","Options","Save","GraphPhysics","SmoothEdges","FastColorChange","StepByStepInfo","nextIndex","WorkerProxy","prog","getElementById","style","n","ThisTask","TaskAlreadyRunningBody","resolve","degrees","printGAD","VertexHasDegree","GetAllDegreesTitle","from","to","num","confList","printCC","NumberOfConflicts","conflist","NodeIsInConflictWith","CheckColoringTitle","resetgraphColoringGreedy","makeAndPrintgraphColoringWelsh","GraphColoringWelsh","printGC","NumberOfVertices","ChromaticNumberIs","GraphColoringTitle","scc","makeAndPrintEulerian","ignoreDuplicate","cb","FordFulkersonMaxFlowMinCut","MaxFlowFromAToB","maxFlow","UsingCapacities","flowPath","FlowWithCapacity","flow","capacity","trim","SourceNode","SinkNode","KruskalMSTTotalWeight","totalWeight","UsingEdges","mst","EdgeImmut","getFrom","getTo","TopoSortErrorHTML","printGraphAlgorithms","$div","innerHTML","addAlgoToPane","alg","navlink","createElement","classList","add","setAttribute","appendChild","then","ui","Network","loadDefault","s","localStorage","getItem","jsonGraph","parse","weight","extraAttrs","filter","key","reduce","obj","attributes","freeze","parseFloat","getWeight","getAttribute","attribute","getAllAttributes","toPlain","toReturn","newWeight","assign","filterExtraAttr","labels","filterNodeExtraAttr","nodeMap","Error","newNodes","floor","set","map","genericNodesToImmutNodes","numNodes","size","newEdges","edge","genericEdgesToImmutEdges","numEdges","getNode","rich","node","get","getNodeForColor","getNonDefaultColor","customColorPalleteArrayNonDefault","getID","currentColor","indexOf","addNode","editNode","has","getLabel","deleteNode","nodeCount","addEdge","deleteEdge","deleteAll","foundOneEdge","oldWeight","foundFirst","index","isDirected","getAllNodes","toArray","getAllNodesAsImmutableList","getAllEdgesAsImmutableList","getAllEdges","getNumberOfNodes","getNumberOfEdges","getAllOutDegrees","_","getAllInOutDegrees","asWeighted","asUnweighted","asDirected","doubleEdges","asUndirected","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","getFullAdjacency","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge","isWeighted","capitalLetters","NodeImmut","getInt","parseInt","setUpToDate","value","listOptions","all","property","GraphState","upToDate","always","makeAndPrintProperties","getProperty","updateIfNotUpdated","find","state","graphProperties","recalcLong","vertices","printableProperties","printGraphProperties","properties","k","updateGraph","clearColorFromNodes","clearColorFromEdges","resetColor","saveState","repaint","edgeFrom","edgeTo","x","y","iId","newGraph","checkAdjacency","nodeFrom","nodeTo","nodeIDToLabel","nodeLabelToID","toLowerCase","rID","found","getGraphAsDataSet","d","DataSet","setLocations","locations","clearNodeColors","clearEdgeColors","workerPool","backHistory","forwardHistory","maxHistory","stronglyConnectedComponents","connectedComponents","graphColoringGreedy","colormode","eulerian","cyclic","Languages","setLanguage","EN_US","customColorPallete","self","container","visWeightEdgeEdit","callback","visOptions","inherit","border","background","highlight","hover","interaction","manipulation","customColors","stringReplacement","generateLabelFromNumber","$popup","on","saveData","first","val","cancelEdit","remove","initialColor","getOwnPropertyNames","alert","addEdgeMode","body","weightFromLabel","operation","undefined","coloring","graphKColorable","graphColors","basicColors","addColors","luminosity","recalcProps","graphChanged","rearrangeGraph","g","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","Array","isArray","applyState","newState","firstLoad","currentState","oldKey","checkForLocalStorage","setItem","r","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","nodeId","newColor","lastNetworkClickEvent","event","contains","target","deleteSelected","ctrlKey","shiftKey","removeItem","saveSettings","Settings","loadSettings","setAll","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","smoothEdges","fastColorChange","stepByStepInfo","defaultCancelCb","deepCopy","deep","clone","copy","src","copyIsArray","isPlainObject","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","arguments","deepFreeze","o","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","splice","htmlEncode","string","t","textContent","replace","printout","text","escape","flatten","rotate","max","iterable","b","toTitleCase","str","match","toUpperCase","replacements","replacement","showSimpleModal","showFormModal","makeFormModal","successText","form","footer","f","class","formRow","basicMap","attrname","validFunc","generalValidator","valueMutator","$v","valid","removeClass","next","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","oText","oIndex","selected","$footer","tabindex","role","html","off","last","trigger","successCb","cancelCb","hasErrors","each","tagName","attr","files","hasClass","findVertexDegreesDirectional","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges","prelabel","compareColor","color1","color2","toggleNodeColor","customColorPalleteArray","currentIndex","currentColorString","checkColoringByNumber","V","vertexAdjacency","nextColorIsSafe","curColor","webpackAsyncContext","req","__webpack_require__","code","ids","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getter","__esModule","ns","create","def","definition","defineProperty","enumerable","chunkId","promises","u","globalThis","Function","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","charset","timeout","nc","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","nmd","paths","children","installedChunks","installedChunkData","promise","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}